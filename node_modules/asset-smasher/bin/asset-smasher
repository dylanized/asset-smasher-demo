#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var smasherLib = require('../lib/asset-smasher');
var Smasher = smasherLib.Smasher;

function listify(val) {
  return val.split(',');
}

program.
  version(require('../package.json').version).
  usage('[options] <output dir>').
  option('--compress', 'compress/minify the generated files').
  option('--hash', 'generate versions of the files with md5 hashes in the name').
  option('--gzip', 'generate gzipped versions of the compiled files').
  option('--hashVersion <version>', 'invalidate all assets without changing file contents [1.0]', '1.0').
  option('--only <pattern,...>', 'only process the files matching these glob patterns (relative to any of the paths) [**/*]', listify).
  option('--paths <path,...>', 'list of paths to look for assets [.]', listify, [process.cwd()]).
  option('--prefix <prefix>', 'prefix to append to logical paths when constructing urls. use if output dir is not served from the root of your web app []', '').
  option('--helpers <js_file>', 'a .js module of helper functions require()s to expose to transforms []').
  option('--plugins <js_file>', 'a .js plugin module []');

program.on('--help', function() {
  console.log('  If --only is not specified, *all* files in the --paths will be processed.');
  console.log('  If --hash is specified, a map.json file will be generated that maps the unmangled file name to the hashed one.');
  console.log();
  console.log('  Examples:');
  console.log();
  console.log('    Compile all assets in the current directory to /home/me/compiledAssets');
  console.log();
  console.log('      $ asset-smasher /home/me/compiledAssets');
  console.log();
  console.log('    Something similar to what the Rails asset pipeline does by default');
  console.log();
  console.log('      $ asset-smasher --compress --hash --gzip --prefix=/assets \\\n          --paths=./js,./css,./images \\\n          --only **/*.{jpg,gif,png},application.js.mf,application.css.mf ./public/assets');
  console.log();
  console.log('    Compile assets, providing some custom helpers to the transformation');
  console.log();
  console.log('      $ asset-smasher --helpers helpers.js output');
});

program.parse(process.argv);

var outputTo = program.args.shift();
if (!outputTo) {
  console.error();
  console.error('  Error: missing output directory');
  console.error();
  process.exit(1);
}
try {
  var stat = fs.statSync(outputTo);
  if(!stat.isDirectory()) {
    console.error();
    console.error('  Error: output directory is not a directory');
    console.error();
    process.exit(1);
  }
} catch(e) {
  // Ignore, we'll create the directory
}

if(program.plugins) {
  // Allow plugin js module to modify transformers, etc
  require(path.resolve(program.plugins)(smasherLib));
}

var smash = new Smasher({
  paths:program.paths,
  only:program.only,
  prefix:program.prefix,
  compress:program.compress,
  hash:program.hash,
  gzip:program.gzip,
  hashVersion:program.hashVersion,
  outputTo:outputTo,
  helpers:program.helpers ? require(path.resolve(program.helpers)) : null
});
var startTime = Date.now();
smash.compileAssets(function(err) {
  if(err) {
    console.error();
    console.error('  Error: %s', err.message);
    console.error();
    process.exit(1);
  } else {
    // Write the filename mapping file.
    if(program.hash) {
      fs.writeFileSync(path.join(outputTo, 'map.json'), JSON.stringify(smash.getHashedFileMapping()), 'utf-8');
    }
    console.log();
    console.log('Finished in %d ms', (Date.now() - startTime));
    console.log();
  }
});
